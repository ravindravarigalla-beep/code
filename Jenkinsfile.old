environment {
    PROJECT = "halodoc-fisclouds"
    APP_NAME = "catalog"
    FE_SVC_NAME = "${APP_NAME}"
    CLUSTER = "gke-cicd"
    CLUSTER_ZONE = "us-central1-c"
    IMAGE_TAG = "us.gcr.io/${PROJECT}/${APP_NAME}:latest"
    JENKINS_CRED = "${PROJECT}"
  }

  agent {
    kubernetes {
      label 'maventest'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
  component: ci
spec:
  # Use service account that can deploy to all namespaces
  
  containers:
  - name: maven
    image:  gcr.io/still-smithy-279711/maven    
    command:
    - cat
    tty: true
  - name: gcloud
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
    command:
    - cat
    tty: true
  - name: helm
    image: gcr.io/still-smithy-279711/ravindra-helm
    command:
    - cat
    tty: true
"""
}
  }
  stages {
    stage('build') {
      steps {
        container('maven') {
          sh """
            mvn clean install -DskipTests
            mvn sonar:sonar \
            -Dsonar.projectKey=webapp \
            -Dsonar.host.url=http://34.68.9.139:8080 \
            -Dsonar.login=a6538aefe07966a020e6d7d83a0a5e45665fc2e5
          """
        }
      }
    }
    stage('Build and push image with Container Builder') {
      steps {
        container('gcloud') {
          sh "cp $workspace/target/timor-cms-1.0.100-SNAPSHOT.jar ./timor-cms-1.0.100-SNAPSHOT.jar"
          sh "gsutil cp -r $workspace/target/timor-cms-1.0.100-SNAPSHOT.jar gs://halodoc-databases/artifacts/timor-cms-1.0.100-SNAPSHOT.jar" 
          sh "PYTHONUNBUFFERED=1 gcloud builds submit -t ${IMAGE_TAG} ." 
        }
      } 
    }
    stage('Deploy ') {
      steps {
        container('helm') {
          sh """
          gcloud container clusters get-credentials gke-apps --zone us-central1-c --project halodoc-fisclouds
          #helm ls
         #kubectl get pods --namespace default
          helm repo add stable https://kubernetes-charts.storage.googleapis.com/ 
          helm repo update  
          helm upgrade --install catalog helm/catalog/ --namespace default
          helm ls
          #kubectl apply -f kubectl/deployment.yaml --namespace default
          #kubectl get pods --namespace default

          """ 
        }
      }
    }
  }
}
